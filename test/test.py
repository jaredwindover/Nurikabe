import unittest
from gentests import gentests, vals

import nurikabe

@gentests
class Test(unittest.TestCase):
    @vals([
        (["████",
          "████"], False),

        (["  ██",
          "████"], True),

        (["██  ",
          "████"], True),

        (["████",
          "  ██"], True),

        (["████",
          "██  "], True),

        (["  ██",
          "██  "], False),

        (["  ██  ██    ██  ██    ██",
          "████████████████████████",
          "  ██    ██    ██    ██  ",
          "  ██████  ████  ████    ",
          "██    ████  ██    ██████",
          "██████  ██  ████  ██  ██",
          "  ██  ████  ██  ██  ████",
          "  ██  ██  ████████  ██  ",
          "████  ██  ██    ██  ██  ",
          "  ██████    ██  ██████  ",
          "      ████████      ████",
          "████████    ██████████  "], True),

        (["  ██  ██    ██  ██    ██",
          "████████████████████████",
          "  ██    ██    ██    ██  ",
          "  ██████  ████  ████    ",
          "██    ████  ██    ██████",
          "██████  ██  ████  ██  ██",
          "  ██  ████  ██  ██  ████",
          "  ██  ██  ████████  ██  ",
          "████  ██  ██    ██  ██  ",
          "  ██████    ██  ██  ██  ",
          "      ████████      ████",
          "████████    ██████████  "], False)
    ])
    def test_something_else(self, board, result):
        self.assertEqual(
            nurikabe.test(
                nurikabe.parse(board, '██', '  ',)),
            result)

    @vals([
        (["████",
          "████"], False),

        (["  ██",
          "████"], False),

        (["██  ",
          "████"], False),

        (["████",
          "  ██"], False),

        (["████",
          "██  "], False),

        (["  ██",
          "██  "], True),

        (["  ██  ██    ██  ██    ██",
          "████████████████████████",
          "  ██    ██    ██    ██  ",
          "  ██████  ████  ████    ",
          "██    ████  ██    ██████",
          "██████  ██  ████  ██  ██",
          "  ██  ████  ██  ██  ████",
          "  ██  ██  ████████  ██  ",
          "████  ██  ██    ██  ██  ",
          "  ██████    ██  ██████  ",
          "      ████████      ████",
          "████████    ██████████  "], False),

        (["  ██  ██    ██  ██    ██",
          "████████████████████████",
          "  ██    ██    ██    ██  ",
          "  ██████  ████  ████    ",
          "██    ████  ██    ██████",
          "██████  ██  ████  ██  ██",
          "  ██  ████  ██  ██  ████",
          "  ██  ██  ████████  ██  ",
          "████  ██  ██    ██  ██  ",
          "  ██████    ██  ██  ██  ",
          "      ████████      ████",
          "████████    ██████████  "], True)
    ])
    def test_disconnect(self, board, result):
        self.assertEqual(
            nurikabe.is_disconnected(
                nurikabe.parse(board, '██', '  ',)),
            result)

    @vals([
        (["████",
          "████"], '██', '  ',
         [[1, 1],
          [1, 1]]),

        (["  ██",
          "████"], '██', '  ',
         [[0, 1],
          [1, 1]]),

        (["██  ",
          "████"], '██', '  ',
         [[1, 0],
          [1, 1]]),

        (["████",
          "  ██"], '██', '  ',
         [[1, 1],
          [0, 1]]),

        (["████",
          "██  "], '██', '  ',
         [[1, 1],
          [1, 0]]),

        (["  ██",
          "██  "], '██', '  ',
         [[0, 1],
          [1, 0]]),

        (["  ██  ",
          "██  ██",
          "  ██  "], '██', '  ',
         [[0, 1, 0],
          [1, 0, 1],
          [0, 1, 0]]),

        (["()##()",
          "##()##",
          "()##()"], '##', '()',
         [[0, 1, 0],
          [1, 0, 1],
          [0, 1, 0]])
    ])
    def test_parse(self,
                   board,
                   block_symbol,
                   space_symbol,
                   result):
        self.assertEqual(
            nurikabe.parse(
                board,
                block_symbol,
                space_symbol),
            result)

    @vals([
        ([[0, 1],
          [1, 0]], '██', '  ',
         ["  ██",
          "██  "]),

        ([[0, 1, 0],
          [1, 0, 1],
          [0, 1, 0]], '██', '  ',
         ["  ██  ",
          "██  ██",
          "  ██  "]),

        ([[0, 1, 0],
          [1, 0, 1],
          [0, 1, 0]], '##', '()',
         ["()##()",
          "##()##",
          "()##()"])
    ])
    def test_prettyprint(self,
                         board,
                         block_symbol,
                         space_symbol,
                         result):
        self.assertEqual(
            nurikabe.pretty_print(board,
                                  block_symbol,
                                  space_symbol),
            result)

    @vals([
        (["████",
          "████"], (0, 0),
         {(0, 0), (0, 1), (1, 0), (1, 1)}),

        (["████",
          "████"], (1, 1),
         {(0, 0), (0, 1), (1, 0), (1, 1)}),

        (["██  ",
          "  ██"], (1, 1),
         {(1, 1)}),

        (["██  ",
          "  ██"], (0, 0),
         {(0, 0)}),

        (["██  ",
          "  ██"], (0, 1),
         {(0, 1)}),

        (["  ██  ██    ██  ██    ██",
          "████████████████████████",
          "  ██    ██    ██    ██  ",
          "  ██████  ████  ████    ",
          "██    ████  ██    ██████",
          "██████  ██  ████  ██  ██",
          "  ██  ████  ██  ██  ████",
          "  ██  ██  ████████  ██  ",
          "████  ██  ██    ██  ██  ",
          "  ██████    ██  ██  ██  ",
          "      ████████      ████",
          "████████    ██████████  "], (3, 5),
         {(3, 5), (3, 6), (4, 6), (5, 6),
          (5, 7), (6, 6), (7, 6), (7, 5),
          (8, 5), (7, 7), (7, 8), (6, 8),
          (8, 8), (9, 8)}),

        (["  ██  ██    ██  ██    ██",
          "████████████████████████",
          "  ██    ██    ██    ██  ",
          "  ██████  ████  ████    ",
          "██    ████  ██    ██████",
          "██████  ██  ████  ██  ██",
          "  ██  ████  ██  ██  ████",
          "  ██  ██  ████████  ██  ",
          "████  ██  ██    ██  ██  ",
          "  ██████    ██  ██  ██  ",
          "      ████████      ████",
          "████████    ██████████  "], (8, 6),
         {(8, 6), (8, 7), (9, 7), (10, 7),
          (10, 8), (10, 9), (9, 9), (8, 9),
          (7, 9), (6, 9)})
    ])
    def test_get_connected_component(self, board, cell, result):
        self.assertEqual(
            nurikabe.get_connected_component(
                nurikabe.parse(board, '██', '  '),
                cell
            ),
            result
        )

    @vals([
        (["████",
          "████"],
         {}),

        (["██  ",
          "  ██"],
         {1: 2}),

        (["  ██  ██    ██  ██    ██",
          "████████████████████████",
          "  ██    ██    ██    ██  ",
          "  ██████  ████  ████    ",
          "██    ████  ██    ██████",
          "██████  ██  ████  ██  ██",
          "  ██  ████  ██  ██  ████",
          "  ██  ██  ████████  ██  ",
          "████  ██  ██    ██  ██  ",
          "  ██████    ██  ██  ██  ",
          "      ████████      ████",
          "████████    ██████████  "],
         {
             1: 8,
             2: 9,
             3: 4,
             4: 3,
             10: 1
         })
    ])
    def test_island_sizes(self, board, result):
        self.assertEqual(
            nurikabe.island_sizes(nurikabe.parse(board, '██', '  ')),
            result)
